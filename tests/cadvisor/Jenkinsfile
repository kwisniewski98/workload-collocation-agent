// Copyright (c) 2020 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

pipeline {
    agent any
    environment {
        CADVISOR_IMAGE = "cadvisor"
        CADVISOR_PORT = 8080
        WCA_DIR = "workload-collocation-agent"
        CADVISOR_CONTAINER_NAME = "cadvisor_container"
        CADVISOR_LOGS_FILE = "cadvisor_logs.txt"
    }
    parameters{
        string(name: 'WCA_URL', defaultValue: 'https://github.com/kwisniewski98/workload-collocation-agent')
        string(name: 'REQUIREMENTS_FILE', defaultValue: 'workload-collocation-agent/tests/cadvisor/requirements.txt')

    }
    stages {
        stage('Build') {
            steps {
                    sh "git clone ${params.WCA_URL}"
                    sh "docker build -t ${CADVISOR_IMAGE} -f deploy/Dockerfile ${WORKSPACE}"

            }
        }
        stage('Deploy') {
            steps {
                sh '''
                sudo docker run -p ${CADVISOR_PORT}:8080 --entrypoint \
                 '/usr/bin/cadvisor' \
                 --name ${CADVISOR_CONTAINER_NAME} \
                 --volume=/:/rootfs:ro \
                 --volume=/var/run:/var/run:ro \
                 --volume=/sys:/sys:ro \
                 --volume=/var/lib/docker/:/var/lib/docker:ro \
                 --volume=/dev/disk/:/dev/disk:ro \
                 --privileged \
                 --volume=${WORKSPACE}/${WCA_DIR}/tests/cadvisor/perf.json:/perf.json:ro \
                  ${CADVISOR_IMAGE} '-perf_events_config=/perf.json' >> ${CADVISOR_LOGS_FILE} & '''

            }
        }
        stage('Test') {
            steps {
                wait_for_cadvisor()
                sh "python3.6 -m venv env; source env/bin/activate; pip install -r ${REQUIREMENTS_FILE} && \
                        pytest ${WORKSPACE}/${WCA_DIR}/tests/cadvisor/test_cadvisor_perf.py::test_perf --junitxml=unit_results.xml --log-level=debug --log-cli-level=debug -v && \
                        deactivate"
            }
        }
    }
    post {
        always {
            script{
                sh "sudo docker stop ${CADVISOR_CONTAINER_NAME} || true && sudo docker rm ${CADVISOR_CONTAINER_NAME} || true"
                if (fileExists('${CADVISOR_LOGS_FILE}')){
                    sh "cat ${CADVISOR_LOGS_FILE}"
                    archiveArtifacts artifacts: '${CADVISOR_LOGS_FILE}'
                }
                sh "rm -rf *"
            }
        }


    }
}
def wait_for_cadvisor() {
    def count = 1
    while(count <= 15) {
        check_image = sh(script: "curl localhost:${CADVISOR_PORT}/api/v1.3", returnStatus:true)
        if (check_image == '0') {
            print("cadvisor is running")
            break
        }
        echo "Attempt $count. Sleeping for 1 second..."
        sleep(1)
        count++
    }
}


